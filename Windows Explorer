import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Iterator;
import java.util.NoSuchElementException;
 
interface Tree<E> {
        // //////////Accessors ////////////
 
        public Node<E> root();
 
        public Node<E> parent(Node<E> node);
 
        public int childCount(Node<E> node);
 
        // //////////Transformers ////////////
        public void makeRoot(E elem);
 
        public Node<E> addChild(Node<E> node, E elem);
 
        public void remove(Node<E> node);
 
        // //////////Iterator ////////////
        public Iterator<E> children(Node<E> node);
 
}
 
interface Node<E> {
 
        public E getElement();
 
        public void setElement(E elem);
}
 
class SLLTree<E extends Comparable<E>> implements Tree<E> {
 
        public SLLNode<E> root;
 
        public SLLTree() {
                root = null;
        }
 
        public Node<E> root() {
                return root;
        }
 
        public Node<E> parent(Node<E> node) {
                return ((SLLNode<E>) node).parent;
        }
 
        public int childCount(Node<E> node) {
                SLLNode<E> tmp = ((SLLNode<E>) node).firstChild;
                int num = 0;
                while (tmp != null) {
                        tmp = tmp.sibling;
                        num++;
                }
                return num;
        }
 
        public void makeRoot(E elem) {
                root = new SLLNode<E>(elem);
        }
 
        public Node<E> addChild(Node<E> node, E elem) {
                SLLNode<E> tmp = new SLLNode<E>(elem);
                SLLNode<E> curr = (SLLNode<E>) node;
                if (curr.firstChild == null || tmp.element.compareTo(curr.firstChild.element)<0) {
                        tmp.sibling = curr.firstChild;
                        curr.firstChild = tmp;
                        tmp.parent = curr;
                        return tmp;
                } else {
                        SLLNode<E> tmp1 = curr.firstChild;
                        while (tmp1.sibling != null&&tmp.element.compareTo(tmp1.sibling.element)>0)
                                tmp1 = tmp1.sibling;
                        tmp.parent = curr;
                        tmp.sibling = tmp1.sibling;
                        tmp1.sibling = tmp;
                        return tmp;
                }
        }
 
        public void remove(Node<E> node) {
                SLLNode<E> curr = (SLLNode<E>) node;
                if (curr.parent != null) {
                        if (curr.parent.firstChild == curr) {
                                // The node is the first child of its parent
                                // Reconnect the parent to the next sibling
                                curr.parent.firstChild = curr.sibling;
                        } else {
                                // The node is not the first child of its parent
                                // Start from the first and search the node in the sibling list
                                // and remove it
                                SLLNode<E> tmp = curr.parent.firstChild;
                                while (tmp.sibling != curr) {
                                        tmp = tmp.sibling;
                                }
                                tmp.sibling = curr.sibling;
                        }
                } else {
                        root = null;
                }
        }
 
        class SLLTreeIterator<T extends Comparable<T>> implements Iterator<T> {
 
                SLLNode<T> start, current;
 
                public SLLTreeIterator(SLLNode<T> node) {
                        start = node;
                        current = node;
                }
 
                public boolean hasNext() {
                        return (current != null);
                }
 
                public T next() throws NoSuchElementException {
                        if (current != null) {
                                SLLNode<T> tmp = current;
                                current = current.sibling;
                                return tmp.getElement();
                        } else {
                                throw new NoSuchElementException();
                        }
                }
 
                public void remove() {
                        if (current != null) {
                                current = current.sibling;
                        }
                }
        }
 
        public Iterator<E> children(Node<E> node) {
                return new SLLTreeIterator<E>(((SLLNode<E>) node).firstChild);
        }
 
        void printTreeRecursive(Node<E> node, int level) {
                if (node == null)
                        return;
                int i;
                SLLNode<E> tmp;
 
                for (i = 0; i < level; i++)
                        System.out.print(" ");
                System.out.println(node.getElement().toString());
                tmp = ((SLLNode<E>) node).firstChild;
                while (tmp != null) {
                        printTreeRecursive(tmp, level + 1);
                        tmp = tmp.sibling;
                }
        }
 
        public void printTree() {
                printTreeRecursive(root, 0);
        }
 
}
 
class SLLNode<P extends Comparable<P>> implements Node<P>, Comparable<P> {
 
        // Holds the links to the needed nodes
        public SLLNode<P> parent, sibling, firstChild;
        // Hold the data
        public P element;
 
        public SLLNode(P o) {
                element = o;
                parent = sibling = firstChild = null;
        }
 
        public P getElement() {
                return element;
        }
 
        public void setElement(P o) {
                element = o;
        }
 
        @Override
        public int compareTo(P arg0) {
                return this.element.compareTo(arg0);
        }
}
 
public class WindowsExplorer {
 
        public static void main(String[] args) throws Exception {
                int i, j, k;
 
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
                int N = Integer.parseInt(br.readLine());
                String commands[] = new String[N];
 
                for (i = 0; i < N; i++)
                        commands[i] = br.readLine();
 
                br.close();
 
                SLLTree<String> tree = new SLLTree<String>();
                tree.makeRoot("c:");
                SLLNode<String> curr = tree.root;
                for (i = 0; i < N; i++) {
                        String komandi[] = commands[i].split(" ");
                        if (komandi[0].equals("CREATE")) {
                                tree.addChild(curr, komandi[1]);
                        } else if (komandi[0].equals("DELETE")) {
                                SLLNode<String> pom = curr.firstChild;
                                while (!(pom.element.compareTo(komandi[1]) == 0))
                                        pom = pom.sibling;
                                tree.remove(pom);
                        } else if (komandi[0].equals("OPEN")) {
                SLLNode<String> pom = curr.firstChild;
                                while (!(pom.element.compareTo(komandi[1]) == 0)&&pom!=null) {
                                        pom = pom.sibling;
                                }
                if (pom!=null)
                    curr=pom;
               
                        }
 
                        else if (komandi[0].equals("PRINT")) {
                                tree.printTreeRecursive(tree.root, 0);
                        } else if (komandi[0].equals("BACK")) {
                                curr = curr.parent;
                               
                        } else if (komandi[0].equals("PATH")) {
                SLLNode<String> pom = curr;
                                Stack<String> s = new Stack<String>();
                                while (curr.parent != null) {
                                        s.push(curr.element);
                                        curr = curr.parent;
                                }
                                System.out.print(tree.root.getElement() + "\\");
                                while (!s.isEmpty()) {
                                        System.out.print(s.pop() + "\\");
                                }
                                System.out.println();
                curr=pom;
                        }
 
                }
        }
}
